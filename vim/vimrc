" Example Vim configuration.
" Copy or symlink to ~/.vimrc or ~/_vimrc.

call pathogen#infect()

"avoiding annoying CSApprox warning message
let g:CSApprox_verbose_level = 0
"set clipboard=unnamed
set nocompatible                  " Must come first because it changes other options.

set tags=tags

syntax on                     " Turn on syntax highlighting.
filetype plugin indent on         " Turn on file type detection.

runtime macros/matchit.vim        " Load the matchit plugin.

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set wrap                          " Turn on line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set directory=/var/tmp            " Keep swap files in one location

" UNCOMMENT TO USE
set tabstop=2                    " Global tab width.
set shiftwidth=2                 " And again, related.
set expandtab                    " Use spaces instead of tabs

set laststatus=2                  " Show the status line all the time
" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

set foldmethod=syntax
set foldlevelstart=99
set foldlevel=99
au BufRead,BufNewFile *.scss set filetype=scss
au BufRead,BufNewFile *.ejs set filetype=html

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SHORTCUTS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set timeoutlen=200
let mapleader = ","

map <Leader>s <ESC>:w<CR>
map <Leader>be :BufExplorer<CR>

nnoremap <leader>1 :set foldlevel=1<cr>
nnoremap <leader>2 :set foldlevel=2<cr>
nnoremap <leader>3 :set foldlevel=3<cr>
nnoremap <leader>4 :set foldlevel=4<cr>
nnoremap <leader>5 :set foldlevel=5<cr>
nnoremap <leader>6 :set foldlevel=6<cr>
nnoremap <leader>7 :set foldlevel=7<cr>
nnoremap <leader>8 :set foldlevel=8<cr>
nnoremap <leader>9 :set foldlevel=9<cr>

" Or use vividchalk
colorscheme ir_black
"railscasts

" Tab mappings.
map <leader>tt :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>to :tabonly<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>
map <leader>tf :tabfirst<cr>
map <leader>tl :tablast<cr>
map <leader>tm :tabmove

nmap <CR> :nohlsearch<CR>
nmap 44 $
vmap 44 $h
nnoremap <Leader>a :A<CR>
map <F5> :exec "!ctags -R --exclude=.git --exclude=vendor/bundle"<CR>
map ,S :!echo\<CR>

"noremap - _
"noremap _ -

" Resizing windows
nnoremap <C-h> :vertical resize +5<cr>
nnoremap <C-l> :vertical resize -5<cr>
nnoremap <C-k> :resize +5<cr>
nnoremap <C-j> :resize -5<cr>

inoremap  <Up>     <NOP>
inoremap  <Down>   <NOP>
inoremap  <Left>   <NOP>
inoremap  <Right>  <NOP>
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

 let g:user_zen_settings = {
  \  'php' : {
  \    'extends' : 'html',
  \    'filters' : 'c',
  \  },
  \  'xml' : {
  \    'extends' : 'html',
  \  },
  \  'erb' : {
  \    'extends' : 'html',
  \  },
  \  'haml' : {
  \    'extends' : 'html',
  \  },
  \}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MAPS TO JUMP TO SPECIFIC COMMAND-T TARGETS AND FILES
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>gr :topleft :split config/routes.rb<cr>
function! ShowRoutes()
  " Requires 'scratch' plugin
  :topleft 100 :split __Routes__
  " Make sure Vim doesn't write __Routes__ as a file
  :set buftype=nofile
  " Delete everything
  :normal 1GdG
  " Put routes output in buffer
  :0r! rake -s routes
  " Size window to number of lines (1 plus rake output length)
  :exec ":normal " . line("$") . "_ "
  " Move cursor to bottom
  :normal 1GG
  " Delete empty trailing line
  :normal dd
endfunction

" disables some plugin mappings
" unmap! <leader>gl
" unmap! <leader>gc

map <leader>gR :call ShowRoutes()<cr>
map <leader>gg :topleft 100 :split Gemfile<cr>

cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%
map <leader>v :view %%
map <leader>A :on<CR>\|:vsplit<CR>\|<c-w>l\|:A<CR>

function! AddRailsLogger()
  exec "normal aRails.logger.info \"\"\<Esc>\=\="
endfunction
command! Logger call AddRailsLogger()

function! SetCtrlPPathTheSameAsVim()
  let g:ctrlp_working_path_mode=''
endfunction
command! CtrlPVimPath call SetCtrlPPathTheSameAsVim()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RUNNING TESTS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>t :call RunTestFile()<cr>
map <leader>r :call RunNearestTest()<cr>
map <leader>bt <ESC>:w<CR>\|:!bundle exec rspec --color --no-drb %<cr>
map <leader>z <ESC>:w<CR>\|:!zeus rspec --color --no-drb %<cr>
map <leader>tu <ESC>:w<CR>\|:!rspec --color --no-drb spec/lib<cr>
map <leader>bu <ESC>:w<CR>\|:!bundle exec rspec --color --no-drb spec/lib<cr>

function! RunTestFile(...)
  if a:0
    let command_suffix = a:1
  else
    let command_suffix = ""
  endif

  " Run the tests for the previously-marked file.
  let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\|_test.rb\|_test.js\|_spec.js\)')

  if in_test_file >= 0
    call SetTestFile()
  elseif !exists("t:grb_test_file")
    :echo "Vim: I don't know what file to test :("
    return
  end
  call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
    let spec_line_number = line('.')
    call RunTestFile(":" . spec_line_number)
endfunction

function! SetTestFile()
    " Set the spec file that tests will be run for.
    let t:grb_test_file=@%
endfunction

function! RunTests(filename)

  " Write the file and run tests for the given filename
  :w
  :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
  :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
  :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
  :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
  :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
  :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
  :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
  :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
  :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo

  " JAVASCRIPT
  if match(expand("%"), '\(._test.js\|_spec.js\)') >= 0

    let filename_for_spec = substitute(expand("%"), "spec/javascripts/", "", "")
    "Konacha
    if filereadable("Gemfile") && match(readfile("Gemfile"), "konacha") >= 0

      " Konacha with Zeus
      if filereadable("zeus.json")
        :silent !echo "Konacha with zeus"
        exec ":!zeus rake konacha:run SPEC=" . filename_for_spec

      " Konacha with bundle exec
      else
        :silent !echo "Konacha with bundle exec"
        exec ":!bundle exec rake konacha:run SPEC=" . filename_for_spec
      endif

    " Everything else (QUnit)
    else
      "Rake
      exec ":!rake"
    endif

  " RUBY
  elseif match(a:filename, '\(._test.rb\|_spec.rb\)') >= 0

    let filename_without_line_number = substitute(a:filename, ':\d\+$', '', '')
    " Minitest
    if match(a:filename, '\(_test\)') != -1
      exec ":!ruby -Ilib/ " . a:filename

    " Bundler
    elseif match(readfile(filename_without_line_number), '\("spec_helper\|''spec_helper\|capybara_helper\|acceptance_spec_helper\|acceptance_helper\)') >= 0

      " Spring (gem like Zeus, to make things faster)
      if match(system('spring status'), 'Spring is running') >= 0
        :silent !echo "Using Spring"
        exec ":!spring rspec -O ~/.rspec --color --format progress --no-drb --order random " . a:filename

      " Zeus
      elseif filereadable("zeus.json") && filereadable("Gemfile")
        :silent !echo "Using zeus"
        exec ":!zeus rspec -O ~/.rspec --color --format progress --no-drb --order random " . a:filename

      " bundle exec
      elseif filereadable("Gemfile")
        :silent !echo "Using bundle exec"
        exec ":!bundle exec rspec --color --order random " . a:filename

      " pure rspec
      else
        :silent !echo "Using vanilla rspec"
        exec ":!rspec -O ~/.rspec --color --format progress --no-drb --order random " . a:filename
      end

    " Everything else
    else
      :silent !echo "Using vanilla rspec outside Rails"
      exec ":!rspec -O ~/.rspec --color --format progress --no-drb --order random " . a:filename
    end
  end
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('Renaming file. New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction

function! CopyFile()
  let old_name = expand('%')
  let new_name = input('Copying file. New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    redraw!
  endif
endfunction

map <leader>n :call RenameFile()<cr>
map <leader>c :call CopyFile()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CtrlP
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>ga :CtrlPClearCache<cr>\|:CtrlP app/assets<cr>
map <leader>gv :CtrlPClearCache<cr>\|:CtrlP app/views<cr>
map <leader>gc :CtrlPClearCache<cr>\|:CtrlP app/controllers<cr>
map <leader>gm :CtrlPClearCache<cr>\|:CtrlP app/models<cr>
map <leader>gl :CtrlPClearCache<cr>\|:CtrlP lib<cr>
map <leader>gs :CtrlPClearCache<cr>\|:CtrlP spec<cr>
map <leader>gu :CtrlPClearCache<cr>\|:CtrlP spec/unit<cr>
map <leader>f :CtrlPClearCache<cr>\|:CtrlP<cr>
map <leader>f :CtrlPClearCache<cr>\|:CtrlP<cr>
map <leader>F :CtrlPClearCache<cr>\|:CtrlP %%<cr>

set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:ctrlp_custom_ignore = 'tmp\|log\|public\|vendor/assets\|vendor/bundle\|vendor/plugins\|spec/cassett\|\.git\|cassett\|/.git\|/app/assets/image\|/coverage'

"highlight ColorColumn ctermbg=7
set colorcolumn=80

" taken from http://vim.wikia.com/wiki/Highlight_unwanted_spaces
highlight RedundantSpaces ctermbg=red guibg=red
match RedundantSpaces /\s\+$/
autocmd BufWinEnter * match RedundantSpaces /\s\+$/
autocmd InsertEnter * match RedundantSpaces /\s\+\%#\@<!$/
autocmd InsertLeave * match RedundantSpaces /\s\+$/
autocmd BufWinLeave * call clearmatches()
