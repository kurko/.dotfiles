" Copy or symlink this file to ~/.vimrc


" avoiding annoying CSApprox warning message
let g:CSApprox_verbose_level = 0

set nocompatible               " be iMproved
filetype off                   " required!

" Vundle
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'

Bundle 'vim-scripts/CSApprox'
Bundle 'vim-scripts/EasyGrep'
Bundle 'kurko/autocoder.vim'
Bundle 'kurko/smartest.vim'
Bundle 'thisivan/vim-bufexplorer'

Bundle 'bkad/CamelCaseMotion'
Bundle 'tsaleh/vim-matchit'
" To use CTags
Bundle 'vim-scripts/taglist.vim'

Bundle 'airblade/vim-gitgutter'
Bundle 'kien/ctrlp.vim.git'
Bundle 'tpope/vim-cucumber.git'
Bundle 'tpope/vim-endwise.git'
Bundle 'tpope/vim-fugitive.git'
Bundle 'sjl/gundo.vim.git'
Bundle 'tpope/vim-haml.git'
Bundle 'nono/vim-handlebars.git'
Bundle 'othree/html5.vim.git'
Bundle 'digitaltoad/vim-jade.git'
Bundle 'tpope/vim-markdown.git'
Bundle 'tpope/vim-ragtag.git'
Bundle 'tpope/vim-rails.git'
Bundle 'cakebaker/scss-syntax.vim.git'
Bundle 'ciaranm/securemodelines.git'
Bundle 'ervandew/supertab.git'
Bundle 'tpope/vim-surround.git'
Bundle 'scrooloose/syntastic.git'
Bundle 'timcharper/textile.vim.git'
Bundle 'tomtom/tlib_vim.git'
Bundle 'MarcWeber/vim-addon-mw-utils.git'
Bundle 'asux/vim-capybara.git'
Bundle 'kchmck/vim-coffee-script.git'
Bundle 'altercation/vim-colors-solarized.git'
Bundle 'pangloss/vim-javascript.git'
Bundle 'itspriddle/vim-jquery.git'
Bundle 'greyblake/vim-preview.git'
Bundle 'tpope/vim-rails.git'
Bundle 'tpope/vim-rake.git'
Bundle 'vim-ruby/vim-ruby.git'
Bundle 'garbas/vim-snipmate.git'
Bundle 'honza/vim-snippets.git'
Bundle 'chrismetcalf/vim-yankring.git'
Bundle 'tpope/vim-vividchalk.git'
Bundle 'mattn/zencoding-vim.git'


" Configuration
set tags=tags                     " ctags

syntax on                         " Turn on syntax highlighting.
filetype plugin indent on         " Turn on file type detection.

runtime macros/matchit.vim        " Load the matchit plugin.

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set wrap                          " Turn on line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set directory=/var/tmp            " Keep swap files in one location

" UNCOMMENT TO USE
set tabstop=2                    " Global tab width.
set shiftwidth=2                 " And again, related.
set expandtab                    " Use spaces instead of tabs

set laststatus=2                  " Show the status line all the time
" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

set foldmethod=syntax
set foldlevelstart=99
set foldlevel=99
au BufRead,BufNewFile *.scss set filetype=scss
au BufRead,BufNewFile *.ejs set filetype=html

" "Theme
colorscheme ir_black
"railscasts


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" DEFAULT BEHAVIORS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGINS CONFIGURATIONS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" git gutter plugin
let g:gitgutter_enabled = 1

" zencoding plugin
 let g:user_zen_settings = {
  \  'php' : {
  \    'extends' : 'html',
  \    'filters' : 'c',
  \  },
  \  'xml' : {
  \    'extends' : 'html',
  \  },
  \  'erb' : {
  \    'extends' : 'html',
  \  },
  \  'haml' : {
  \    'extends' : 'html',
  \  },
  \}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CtrlP
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:ctrlp_custom_ignore = 'tmp\|logs\|vendor/assets\|vendor/bundle\|vendor/plugins\|spec/cassett\|\.git\|cassett\|/.git\|/app/assets/image\|/coverage\|.DS_STORE'
let g:ctrlp_map = '<c-p>'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CUSTOM SHORTCUTS & KEY BINDINGS
"
" For tests & specs custom functions and key bindings, look at the respective
" section below
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

  set timeoutlen=200
  let mapleader = ","

  " save by pressing ,s instead of :w
  map <Leader>s <ESC>:w<CR>
  map <Leader>be :BufExplorer<CR>

  nnoremap <leader>1 :set foldlevel=1<cr>
  nnoremap <leader>2 :set foldlevel=2<cr>
  nnoremap <leader>3 :set foldlevel=3<cr>
  nnoremap <leader>4 :set foldlevel=4<cr>
  nnoremap <leader>9 :set foldlevel=9<cr>

  " Tab mappings.
    map <leader>tt :tabnew<cr>
    map <leader>te :tabedit
    map <leader>tc :tabclose<cr>
    map <leader>to :tabonly<cr>
    map <leader>tn :tabnext<cr>
    map <leader>tp :tabprevious<cr>
    map <leader>tf :tabfirst<cr>
    map <leader>tl :tablast<cr>
    map <leader>tm :tabmove

  " Enter clears search highlight
  nmap <CR> :nohlsearch<CR>

  " When pasting in visual mode, doesn't replace current register
  " vnoremap p "_dP
  " I haven't found how to hide this function (yet)
  function! RestoreRegister()
    let @" = s:restore_reg
    return ''
  endfunction

  function! s:Repl()
      let s:restore_reg = @"
      return "p@=RestoreRegister()\<cr>"
  endfunction

  " this supports "rp that replaces the selection by the contents of @r
  vnoremap <silent> <expr> p <sid>Repl()


  " Goes to the end of the line (pressing shift+4 is annoying)
  nmap 44 $
  vmap 44 $h

  function! SearchCurrentPath()
    let l:word = expand("<cword>")
    call feedkeys(":CtrlP\<CR>".l:word, "t")
  endfunction
  nnoremap <leader>g :call SearchCurrentPath()<cr>

  " Tab becomes Esc
  " inoremap <Tab> <Esc>

  " Updates CTags
  map <F5> :exec "!ctags -R --exclude=.git --exclude=vendor/bundle"<CR>

  " Resizing windows
  nnoremap <C-h> :vertical resize +5<cr>
  nnoremap <C-l> :vertical resize -5<cr>
  nnoremap <C-k> :resize +5<cr>
  nnoremap <C-j> :resize -5<cr>

  inoremap  <Up>     <NOP>
  inoremap  <Down>   <NOP>
  inoremap  <Left>   <NOP>
  inoremap  <Right>  <NOP>
  noremap   <Up>     <NOP>
  noremap   <Down>   <NOP>
  noremap   <Left>   <NOP>
  noremap   <Right>  <NOP>

  " When you've writen : (colon), press %% very fast and it'll write the current
  " file's directory
  cnoremap %% <C-R>=expand('%:h').'/'<cr>
  map <leader>e :edit %%
  map <leader>v :view %%

  " RUBY & RAILS
    " Keeps current file in on side, and its test file in the other
    " (depends on Rails.vim)
    map <leader>A :on<CR>\|:vsplit<CR>\|<c-w>l\|:A<CR>
    " adds <%= %> in the current line
    inoremap <leader>e <%=  %><ESC>==lllli
    nnoremap <leader>e i<%=  %><ESC>==lllli

    " :A is from rails.vim plugin
    nnoremap <Leader>a :A<CR>

    " deletes the remaining chars from a string
    nnoremap <Leader>ds vf"hd

  " CTRLP
    map <leader>ga :CtrlPClearCache<cr>\|:CtrlP app/assets<cr>
    map <leader>gv :CtrlPClearCache<cr>\|:CtrlP app/views<cr>
    map <leader>gc :CtrlPClearCache<cr>\|:CtrlP app/controllers<cr>
    map <leader>gm :CtrlPClearCache<cr>\|:CtrlP app/models<cr>
    map <leader>gl :CtrlPClearCache<cr>\|:CtrlP lib<cr>
    map <leader>gs :CtrlPClearCache<cr>\|:CtrlP spec<cr>
    map <leader>gu :CtrlPClearCache<cr>\|:CtrlP spec/unit<cr>
    map <leader>f :CtrlPClearCache<cr>\|:CtrlP<cr>
    map <leader>f :CtrlPClearCache<cr>\|:CtrlP<cr>
    map <leader>F :CtrlPClearCache<cr>\|:CtrlP %%<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CUSTOM COMMANDS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! SetCtrlPPathTheSameAsVim()
  let g:ctrlp_working_path_mode=''
endfunction

" When you go to another project inside of a Rails project (e.g Ember project
" in app/assets/javascript/my_project), CtrlP still uses ./ as root. By typing
" this command, CtrlP will :cd into this internal project.
command! CtrlPVimPath call SetCtrlPPathTheSameAsVim()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CUSTOM FUNCTIONS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

  " Rename current file
  function! RenameFile()
    let old_name = expand('%')
    let new_name = input('Renaming file. New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
      exec ':saveas ' . new_name
      exec ':silent !rm ' . old_name
      redraw!
    endif
  endfunction

  " Copy current file to a new location
  function! CopyFile()
    let old_name = expand('%')
    let new_name = input('Copying file. New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
      exec ':saveas ' . new_name
      redraw!
    endif
  endfunction

  map <leader>n :call RenameFile()<cr>
  map <leader>c :call CopyFile()<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TESTS & SPECS FUNCTIONS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  map <leader>t :call RunTestFile()<cr>
  map <leader>r :call RunNearestTest()<cr>
  map <leader>bt <ESC>:w<CR>\|:!bundle exec rspec --color --no-drb %<cr>
  map <leader>z <ESC>:w<CR>\|:!zeus rspec --color --no-drb %<cr>
  map <leader>tu <ESC>:w<CR>\|:!rspec --color --no-drb spec/lib<cr>
  map <leader>bu <ESC>:w<CR>\|:!bundle exec rspec --color --no-drb spec/lib<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ENVIRONMENT CONFIGURATIONS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  " taken from http://vim.wikia.com/wiki/Highlight_unwanted_spaces
  highlight RedundantSpaces ctermbg=red guibg=red
  match RedundantSpaces /\s\+$/
  autocmd BufWinEnter * match RedundantSpaces /\s\+$/
  autocmd InsertEnter * match RedundantSpaces /\s\+\%#\@<!$/
  autocmd InsertLeave * match RedundantSpaces /\s\+$/
  autocmd BufWinLeave * call clearmatches()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

"highlight ColorColumn ctermbg=7
set colorcolumn=80
Bundle 'rking/ag.vim'
